name: Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
      actions: write
      checks: write
      deployments: write
      discussions: write
      pages: write
      repository-projects: write
      security-events: write
      statuses: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.12.1
      
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
      
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Determine next version from main branch
          echo "🔍 Analyzing commits for next version..."
          pnpm exec semantic-release --dry-run > release_output.txt 2>&1
          
          echo "=== Full semantic-release output ==="
          cat release_output.txt
          echo "=================================="
          
          # Check for multiple version patterns
          if grep -q "the next release version is" release_output.txt; then
            NEW_VERSION=$(grep "the next release version is" release_output.txt | grep -oE "[0-9]+\.[0-9]+\.[0-9]+" | tail -1)
            echo "✅ Version determined: $NEW_VERSION"
            
            # Create release branch
            RELEASE_BRANCH="release/v${NEW_VERSION}"
            echo "🌿 Creating release branch: $RELEASE_BRANCH"
            git checkout -b $RELEASE_BRANCH
            
            # Update package.json version manually
            echo "📦 Updating package.json to v${NEW_VERSION}"
            npm version ${NEW_VERSION} --no-git-tag-version
            
            # Generate changelog manually with semantic-release format
            echo "📝 Generating CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## [${NEW_VERSION}] - $(date +%Y-%m-%d)" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # Get commits since last tag for changelog
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              echo "### Changes since $LAST_TAG:" >> CHANGELOG.md
              git log --oneline --pretty=format:"- %s" ${LAST_TAG}..HEAD >> CHANGELOG.md
            else
              echo "### Initial release" >> CHANGELOG.md
              git log --oneline --pretty=format:"- %s" >> CHANGELOG.md
            fi
            echo "" >> CHANGELOG.md
            
            # Commit changes
            echo "💾 Committing changes"
            git add package.json CHANGELOG.md
            git commit -m "chore(release): v${NEW_VERSION}"
            
            # Create tag
            echo "🏷️ Creating tag v${NEW_VERSION}"
            git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
            
            # Push branch and tag
            echo "📤 Pushing release branch and tag..."
            git push origin $RELEASE_BRANCH
            git push origin "v${NEW_VERSION}"
            
            # Create PR
            echo "📋 Creating Pull Request..."
            gh pr create \
              --title "Release v${NEW_VERSION}" \
              --body "🚀 **Release v${NEW_VERSION}**

            - Updated package.json to v${NEW_VERSION}
            - Generated CHANGELOG.md with commit history
            - Created tag v${NEW_VERSION}
            
            Ready to merge." \
              --base main \
              --head $RELEASE_BRANCH
              
            echo "✅ Release process completed!"
            echo "📋 PR created for release v${NEW_VERSION}"
            echo "🏷️ Tag created: v${NEW_VERSION}"
              
          else
            echo "ℹ️ No release needed"
          fi